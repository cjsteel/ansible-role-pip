---
# pip/tasks/main.yml

- name: install pip2 requirements
  package:
    name: "{{ pip2_requirements }}"
    state: present
  register: pip_install_requirements
  until: pip_install_requirements is succeeded
  retries: 3
  when: pip_python_version == 2

- name: install pip3 requirements
  package:
    name: "{{ pip3_requirements }}"
    state: present
  register: pip_install_requirements
  until: pip_install_requirements is succeeded
  retries: 3
  when: pip_python_version == 3

- name: Ensure (Python2.x) virtualenvs exist and python package(s) are installed to them
  become: '{{ pip_user }}'
  pip:
    name: "{{ item.package }}"
    virtualenv: "{{ pip_virtualenvs_base_path }}/{{ item.name }}/{{ item.version }}"
    version: "{{ item.version }}"
    environment: "{{ item.environment | default(omit) }}"
    state: "{{ item.state }}"
  loop: "{{ pip_virtualenvs|default([]) }}"
  when: item.state == 'present'
  register: pip_create_virtualenvs
  until: pip_create_virtualenvs is succeeded
  when: pip_python_version == 2

- name: Ensure (Python 3.x) venvs exist and python package(s) are installed to them
  become: '{{ pip_user }}'
  pip:
    name: "{{ item.package }}"
    virtualenv: "{{ pip_virtualenvs_base_path }}/{{ item.name }}/{{ item.version }}"
    virtualenv_command: /usr/bin/python3 -m venv
    version: "{{ item.version }}"
    environment: "{{ item.environment | default(omit) }}"
    state: "{{ item.state }}"
  loop: "{{ pip_virtualenvs|default([]) }}"
  when: item.state == 'present'
  register: pip_create_virtualenvs
  until: pip_create_virtualenvs is succeeded
  when: pip_python_version == 3

- name: Ensure virtualenvs exist and python package(s) are installed to them
  become: '{{ pip_user }}'
  file:
    path: "{{ pip_virtualenvs_base_path }}/{{ item.name }}/{{ item.version }}"
    state: "{{ item.state }}"
  loop: "{{ pip_virtualenvs|default([]) }}"
  when: item.state == 'absent'
  register: pip_delete_virtualenvs
  until: pip_delete_virtualenvs is succeeded

- name: Ensure for fragments directory
  become: '{{ pip_user }}'
  file:
    path: ~/bin/fragments
    state: directory
    mode: '0744'

- name: Ensure for aliases
  become: '{{ pip_user }}'
  copy:
    dest: ~/bin/fragments/{{ item.name }}-{{ item.version }}.sh
    content: "alias {{ item.name }}-{{ item.version }}='source {{ pip_virtualenvs_base_path }}/{{ item.name }}/{{ item.version }}/bin/activate'\n"
    mode: '0744'
  loop: "{{ pip_virtualenvs|default([]) }}"
  when: item.state == 'present'

- name: assemble our fragments into a ~/bash_aliases file
  become: '{{ pip_user }}'
  assemble:
    backup: yes
    remote_src: yes 
    src: ~/bin/fragments
    dest: ~/.bash_aliases
    mode: 0644

- name: remove our ~/.bash_aliases fragments directory
  become: '{{ pip_user }}'
  file:
    state: absent
    path: ~/bin/fragments
  with_items:
    - "{{ pip_virtualenvs }}"

